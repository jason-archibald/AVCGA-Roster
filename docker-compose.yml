# This is the definitive, working configuration for the AVCGA CrewHub project.
# It should be used with Docker Compose v2 (i.e., `docker compose` command).
# The top-level 'version' attribute is obsolete and has been removed.

services:
  # PostgreSQL Database Service
  db:
    image: postgres:15-alpine
    restart: always
    # Loads variables from the specified file to use in this service definition
    env_file:
      - ./backend/.env
    # Sets variables INSIDE the container for the PostgreSQL image to use
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      # Persists database data across container restarts
      - db_data:/var/lib/postgresql/data
      # Mounts the entire SQL directory to allow the entrypoint to run all .sql files
      - ./backend/sql/:/docker-entrypoint-initdb.d/
    healthcheck:
      # This command checks if the database is ready to accept connections from the specified user.
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Service (Node.js/Express)
  backend:
    build:
      context: ./backend
    restart: always
    # This loads all variables from the specified file directly into the container's environment.
    env_file:
      - ./backend/.env
    ports:
      - "3000:3000" # Maps container port 3000 to host port 3000 for Nginx to proxy to
    depends_on:
      # This ensures the backend service does not start until the 'db' service
      # reports itself as 'healthy' based on the healthcheck command.
      db:
        condition: service_healthy

  # Frontend Member Portal (React.js)
  member-web:
    build:
      context: ./member-web
    restart: always
    ports:
      - "8080:80" # Maps container port 80 to host port 8080

  # Frontend Admin Portal (React.js)
  web-admin:
    build:
      context: ./web-admin
    restart: always
    ports:
      - "8081:80" # Maps container port 80 to host port 8081

volumes:
  db_data: # Defines the named volume for persistent database storage
